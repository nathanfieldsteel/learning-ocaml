* Utilities
** Basic stuff

range

#+begin_src ocaml
    let rec (--) a b =
      if (a <= b)
      then (match b-a with
            | 0 -> [b]
            | _ -> a :: ((a+1) -- b))
      else (a :: ((a-1) -- b));;
#+end_src

sum a list

#+begin_src ocaml
  let sum lst =
    let rec sum_acc p lst = match lst with
      | [] -> p
      | x :: xs -> sum_acc (x + p) xs in
    sum_acc 0 lst;;
#+end_src

efficient exponentiation

#+begin_src ocaml
  let rec pow a b = match b with
    | 0 -> 1
    | 1 -> a
    | b -> if (b mod 2 = 0)
           then (let r = pow a (b/2) in r*r)
           else (let r = pow a (b/2) in a*r*r);;
#+end_src

#+begin_src ocaml
  let (%) a b = 
#+end_src

#+begin_src ocaml
  let rec powermod a b n =
    let ( *% ) x y = ((x mod n)*(y mod n)) mod n in
    match b with
    | 0 -> 1
    | 1 -> a
    | b -> if (b mod 2 = 0)
           then (let r = powermod a (b/2) n in r *% r)
           else (let r = powermod a (b/2) n in a *% r *% r);;
#+end_src

#+RESULTS:
: <fun>

** Fibonacci stuff

#+begin_src ocaml
  let fib n =
    let rec fib_aux a b n = match n with
      | 0 -> a 
      | 1 -> b
      | n -> fib_aux b (a+b) (n-1) in
    fib_aux 0 1 n;;
#+end_src

#+RESULTS:
: <fun>

** Combinatorial functions

#+begin_src ocaml
  let rec factorial n = match n with
    | 0 -> 1
    | n -> n * factorial (n-1)
#+end_src

#+begin_src ocaml
  let binomial n k =
    let prod lst =
      let rec prod_acc p lst = match lst with
        | [] -> p
        | x :: xs -> prod_acc (p*x) xs in
      prod_acc 1 lst in
    (prod (n -- (n-k+1))) / (factorial k);;
#+end_src

#+RESULTS:
: 4950

* Problems
** DONE 1 - Multiples of 3 or 5

#+begin_src ocaml
  let threes = 3*333*334/2 in
    let fives = 5*199*200/2 in
    let fifteens = 15*66*67/2 in
    threes + fives - fifteens;;
#+end_src

#+RESULTS:
: 233168

** DONE 2 - Even Fibonacci Numbers

#+begin_src ocaml
    (1--33)
    |> List.filter (fun n -> n - 3*(n / 3) = 0)
    |> List.map fib
    |> sum
#+end_src

#+RESULTS:
: 4613732

** DONE 5 - Smallest multiple

#+begin_src ocaml
  2 * 2 * 2 * 2 * 3 * 3 * 5 * 7 * 11 * 13 * 17 * 19
#+end_src

#+RESULTS:
: 232792560

** DONE 6 - Sum Square Difference

#+begin_src ocaml
  let sum_of_squares n = n*(n+1)*(2*n + 1)/6 in
    let square_of_sum n = pow ((n)*(n+1)/2) 2 in
    (square_of_sum 100) - (sum_of_squares 100)
#+end_src

#+RESULTS:
: 25164150

** TODO 15 - Lattice Paths

I know this is the answer but need to re-write it in arbitrary
precision arithmetic. The numerator of the binomial coeff is too big
for machine integers, even though the final answer is not.

#+begin_src ocaml
  binomial 40 20
#+end_src

#+RESULTS:
: 780

** DONE 31 - Coin Sums

#+begin_src ocaml
  let sums n =
    let rec sums n coins = match coins with
      | [] -> if n = 0 then 1 else 0
      | c :: cs -> if (c <= n)
                   then (sums (n-c) coins + sums n cs)
                   else (sums n cs) in
    sums n [200;100;50;20;10;5;2;1];;

  sums 200
#+end_src

#+RESULTS:
: 73682


** TODO 36 Double-base Palindromes

Only need to check ~100 things: the right 3 digits in base 10
determine the rest of the digits, base 10. Then check.


** TODO 42 Coded Triangle Numbers
** TODO 48 Self Powers

Again, need big ints. Plenty of cases where a, b and (ab mod n) are
all machine-int sized, but ab itself is not.
** DONE 76 Counting Summations

(a bit slow. could memo-ize)

#+begin_src ocaml
      let partitions n =
        let rec partitions_bound n b = match b with
          | b when b > n -> 0
          | b when b = n -> 1
          | b -> (partitions_bound (n-b) b)
                  + (partitions_bound n (b+1)) in
        partitions_bound n 1;;

      (partitions 100) - 1
#+end_src

#+RESULTS:
: 190569291
